
# coding: utf-8

# In[1]:


# Import libraries
import sklearn
import pandas as pd
import seaborn as sns
import statsmodels.formula.api as smf
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.cross_validation import train_test_split
from sklearn.model_selection  import train_test_split
import numpy as np
from sklearn.datasets import make_regression
from math import sqrt
import matplotlib.pyplot as plt
import seaborn as sn
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn import datasets, linear_model
import statsmodels.api as sm
from scipy import stats
import scipy
from scipy.stats.stats import pearsonr


# Plotting inline
get_ipython().run_line_magic('matplotlib', 'inline')


# # Reading of datasets

# In[2]:


# Common storages
Timeseries_Stationsplein = pd.read_csv(index_col=0)
Timeseries_Jaarbeursplein = pd.read_csv(index_col=0)

# Shared bicycles
Timeseries_OV_Stationsplein = pd.read_csv(index_col=0)
Timeseries_OV_Jaarbeursplein = pd.read_csv(index_col=0)


# In[3]:


# Function for calculating RMSLE
def rmsle(y_pred, y_test):
    log1 = np.nan_to_num(np.array([np.log(v + 1) for v in y_pred]))
    log2 = np.nan_to_num(np.array([np.log(v + 1) for v in y_test]))
    calc = (log1 - log2) ** 2
    return np.sqrt(np.mean(calc))


# # Baseline for Stationsplein

# In[21]:



X = Timeseries_Stationsplein.iloc[:, 10:58]
y = Timeseries_Stationsplein.t_plus420_Outgoing

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.3, shuffle=False)

# Define model
lm2 = LinearRegression()

# Fit Model
lm2.fit(X_train, y_train)

# Predict
y_pred = lm2.predict(X_test)

#R2
print(r2_score(y_test, y_pred))

#MAE
print(mean_absolute_error(y_test, y_pred))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#RMSLE
print(rmsle(y_pred, y_test))


# # Baseline for Jaarbeursplein

# In[185]:



X = Timeseries_Jaarbeursplein.iloc[:, 10:58]
y = Timeseries_Jaarbeursplein.t_plus480_Outgoing

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.3, shuffle=False)

# Define model
lm2 = LinearRegression()

# Fit Model
lm2.fit(X_train, y_train)

# Predict
y_pred = lm2.predict(X_test)

#R2
print(r2_score(y_test, y_pred))

#MAE
print(mean_absolute_error(y_test, y_pred))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#RMSLE
print(rmsle(y_pred, y_test))


# # Baseline for shared bicycles Stationsplein

# In[192]:



X = Timeseries_OV_Stationsplein.iloc[:, 10:58]
y = Timeseries_OV_Stationsplein.t_plus480_Returns

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.3,  shuffle=False)

# Instantiate model
lm4 = LinearRegression()

# Fit Model
lm4.fit(X_train, y_train)

# Predict
y_pred = lm4.predict(X_test)

#R2
print(r2_score(y_test, y_pred))

#MAE
print(mean_absolute_error(y_test, y_pred))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#RMSLE
print(rmsle(y_pred, y_test))


# # Baseline for shared bicycles Jaarbeursplein

# In[35]:



X = Timeseries_OV_Jaarbeursplein.iloc[:, 10:58]
y = Timeseries_OV_Jaarbeursplein.t_plus420_Returns

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.3,  shuffle=False)

# Instantiate model
lm5 = LinearRegression()

# Fit Model
lm5.fit(X_train, y_train)

# Predict
y_pred = lm5.predict(X_test)

#R2
print(r2_score(y_test, y_pred))

#MAE
print(mean_absolute_error(y_test, y_pred))

#RMSE
print(np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

#RMSLE
print(rmsle(y_pred, y_test))


# # Regression results

# In[ ]:


X = Timeseries_Stationsplein.iloc[:, 10:58]
y = Timeseries_Stationsplein.Incoming

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=666, test_size=0.3, shuffle=False)

X2 = sm.add_constant(X_train)
est = sm.OLS(y_train, X2)
est2 = est.fit()
y_pred = lm2.predict(X_test)

print(est2.summary())


# # Pearson correlation coefficient

# In[30]:


corr = Timeseries_OV_Stationsplein.iloc[:, 2:10].corr()
corr

